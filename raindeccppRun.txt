ian@ian-Latitude-3190-2-in-1:~$ ls rai*
raindec           raindec.o                         rainfalldeciles
raindeccpp        rainfall_data.csv                 rainfalldeciles2.f
raindeccpp.cpp    rainfall_dataf.csv                rainfalldeciles.cpp
raindec.f         rainfall_data_fortran.csv         rainfalldecilescpp
raindec.f08       rainfall_data_fortran_sorted.csv  rainfalldeciles.f
raindeciles2.cpp  rainfall_dataf_sorted.csv         rainfalldeciles.o
raindeciles.c     rainfall_datapy_sorted.csv        rainfalldeciles.py
ian@ian-Latitude-3190-2-in-1:~$ ./raindec
 Enter the filename: 
rainfall_data_fortran_sorted.csv
 Decile            1 :    7.4044651734090365     
 Decile            2 :    15.599452033620265     
 Decile            3 :    25.877998160001692     
 Decile            4 :    32.533033076326433     
 Decile            5 :    45.606998421703594     
 Decile            6 :    56.127719756949624     
 Decile            7 :    68.423302651215693     
 Decile            8 :    77.224476929665741     
 Decile            9 :    88.721274257632658     
ian@ian-Latitude-3190-2-in-1:~$ g++ raindeccpp.cpp
ian@ian-Latitude-3190-2-in-1:~$ ./a.out
Enter CSV filename: rainfall_data_fortran_sorted.csv
Deciles:
Decile 1: 7.40447
Decile 2: 15.5995
Decile 3: 25.878
Decile 4: 32.533
Decile 5: 45.607
Decile 6: 56.1277
Decile 7: 68.4233
Decile 8: 77.2245
Decile 9: 88.7213
ian@ian-Latitude-3190-2-in-1:~$ g++ raindeccpp.cpp -o raindeccpp
ian@ian-Latitude-3190-2-in-1:~$ ./raindeccpp
Enter CSV filename: rainfall_data_fortran_sorted.csv
Deciles:
Decile 1: 7.40447
Decile 2: 15.5995
Decile 3: 25.878
Decile 4: 32.533
Decile 5: 45.607
Decile 6: 56.1277
Decile 7: 68.4233
Decile 8: 77.2245
Decile 9: 88.7213
ian@ian-Latitude-3190-2-in-1:~$ cat raindeccpp.cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>

std::vector<double> read_csv(const std::string& filename) {
    std::ifstream data(filename);
    std::string line;
    std::vector<double> rainfall;

    while(std::getline(data, line)) {
        std::stringstream lineStream(line);
        std::string cell;

        std::getline(lineStream, cell, ','); // Skip the date/identifier
        std::getline(lineStream, cell, ','); // Get the rainfall data

        rainfall.push_back(std::stod(cell));
    }

    return rainfall;
}

void calculate_deciles(const std::vector<double>& data) {
    std::vector<double> sorted_data(data);
    std::sort(sorted_data.begin(), sorted_data.end());

    std::cout << "Deciles:\n";
    for (int i = 1; i <= 9; ++i) {
        int idx = int(i * (sorted_data.size() - 1) / 10.0);
        std::cout << "Decile " << i << ": " << sorted_data[idx] << "\n";
    }
}

int main() {
    std::string filename;
    std::cout << "Enter CSV filename: ";
    std::cin >> filename;

    std::vector<double> rainfall_data = read_csv(filename);
    calculate_deciles(rainfall_data);

    return 0;
}

ian@ian-Latitude-3190-2-in-1:~$ 
